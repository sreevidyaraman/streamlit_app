import streamlit as st
import pandas as pd
import io
from st_aggrid import AgGrid, GridOptionsBuilder, DataReturnMode, GridUpdateMode
from st_aggrid.grid_options_builder import GridOptionsBuilder
# Set the page layout to wide
st.set_page_config(layout="wide")

import pandas as pd
import re
 
from openai import AzureOpenAI

def initialize_llm() :
    gpt_35_config = {
        "api_base":"https://gai-sl-openai.openai.azure.com/",
        "deployment_name": "gai-sl-openai",    
        "openai_api_key": "b62ebb8214074646b3195315b0ae0f25",
        "api_version": "2024-02-15-preview",
        "temperature": 0
    }
    
    opeanai_api_base = gpt_35_config["api_base"]
    api_version =gpt_35_config["api_version"]
    openai_key = gpt_35_config["openai_api_key"]
    azure_deployment=gpt_35_config["deployment_name"]
    
    llm = AzureOpenAI(
        azure_endpoint=opeanai_api_base,
        api_key=openai_key,
        api_version=api_version,
        azure_deployment=azure_deployment
    )
    return llm

def create_json(df):
    json_dynamic = {}

    for _, row in df.iterrows():
        user_story = row['User Story']

        if user_story not in json_dynamic:
            # Create empty lists for all columns except 'User Story'
            json_dynamic[user_story] = {col: [] for col in df.columns if col != 'User Story'}

        # Append non-empty values to the respective lists
        for col in df.columns:
            if col != 'User Story' and not pd.isna(row[col]):            
                json_dynamic[user_story][col].append(row[col])
    return json_dynamic


def generate_questions_hcp_happy(question_generation_context,kpi_metrics,dimensions,llm,num_of_questions=5):
    Question_Generation_Prompt_Template = """
                                        You are an expert question generator. 
                                        Use the given {question_generation_context}. 
                                        Generate a list of questions that can help you analyze these {dimensions} by {kpi_metrics}.
                                        
                                        ###
                                        There are three inputs:

                                        1. Number of questions that needs to be generated.
                                        2. The User story context to generate questions.
                                        3. The Dimensions and KPI Metrics on which questions needs to be generated.

                                        ###
                                        one output:
                                        Generated questions which is list of generated questions.
                                        Strictly follow the below guideline for the generated questions:
                                        * The list of generated question should be strictly enclosed between ``` and ```.
                                        * You need to include all the dimensions along with one key metrics while generating questions.
                                        * The number of questions to be generated should be strictly equal to the provided number of questions.
                                        * The generated question should have different variants of question without changing the context of it.

                                        NUMBER OF QUESTIONS :
                                        {num_of_questions} 
                                        
                                        GENERATED QUESTIONS:
                                        """.format(num_of_questions=num_of_questions,
                                                   question_generation_context=question_generation_context,
                                                   dimensions=dimensions,
                                                   kpi_metrics=kpi_metrics
                                                   )
    qg_message = [{"role":"system","content":Question_Generation_Prompt_Template}]
    message = llm.chat.completions.create(messages = qg_message,temperature=0,model = "5K-gpt-35-turbo")
    generated_questions = message.choices[0].message.content
    pattern = r'\d+\.\s+'
    list_of_generated_questions = re.split(pattern, generated_questions)[1:]
    list_of_generated_questions = list(map(lambda x: x.strip(),list_of_generated_questions))
    return(list_of_generated_questions)

def generate_questions_hcp_multirequest(question_generation_context,kpi_metrics,dimensions,llm,num_of_questions=15):
    Question_Generation_Prompt_Template = """
                                        You are an expert question generator. 
                                        Use the given {question_generation_context}. 
                                        Generate a list of questions that can help you analyze these {dimensions} by {kpi_metrics}.
                                        
                                        ###
                                        There are three inputs:

                                        1. Number of questions that needs to be generated.
                                        2. The User story context to generate questions.
                                        3. The Dimensions and KPI Metrics on which questions needs to be generated.

                                        ###
                                        one output:
                                        Generated questions which is list of generated questions.
                                        Strictly follow the below guideline for the generated questions:
                                        * The list of generated question should be strictly enclosed between ``` and ```.
                                        * You need to include all the dimensions along with key metrics while generating questions.
                                        * You need to use multiple dimension values in the question with multiple key metrics.
                                        * The number of questions to be generated should be strictly equal to the provided number of questions.
                                        * The generated question should have different variants of question without changing the context of it.

                                        NUMBER OF QUESTIONS :
                                        {num_of_questions} 
                                        
                                        GENERATED QUESTIONS:
                                        """.format(num_of_questions=num_of_questions,
                                                   question_generation_context=question_generation_context,
                                                   dimensions=dimensions,
                                                   kpi_metrics=kpi_metrics
                                                   )
    qg_message = [{"role":"system","content":Question_Generation_Prompt_Template}]
    message = llm.chat.completions.create(messages = qg_message,temperature=0,model = "5K-gpt-35-turbo")
    generated_questions = message.choices[0].message.content
    pattern = r'\d+\.\s+'
    list_of_generated_questions = re.split(pattern, generated_questions)[1:]
    list_of_generated_questions = list(map(lambda x: x.strip(),list_of_generated_questions))
    return(list_of_generated_questions)

# Display your styled banners (as in your original code)
st.markdown("""
    <style>
    .blue-banner {
        background-color: #002147;
        color: white;
        padding: 8px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
    }

    .grey-banner {
        background-color: #F5F5F5; /* Light Grey color */
        display: flex; /* Enable flexbox */
        justify-content: left; /* Left align text */
        align-items: center; /* Center align items vertically */
        padding: 0px; /* Padding for spacing */
        width: 100%; /* Full width */
        height: 40px;
        margin-bottom: 5px; /* Remove bottom margin */
    }  

    h1 {
        margin: 0; /* Remove default margin from heading */
        font-size: 18px; /* Reduce font size for less height */
        line-height: 0; /* Set line height to 1 to minimize vertical space */
        color: white; /* White text color */
    }

    .sub-workstream-label {
        font-size: 16px;
        font-weight: normal; /* Remove bold weight */
        margin-bottom: 5px; /* Space below label */
        margin-right: 5px; /* Space between label and icon */
        display: inline-block; /* Allow label and icon to align in the same row */
    }

    .workstream-section {
        margin-bottom: 0; /* Remove bottom margin */
        display: flex; /* Use flexbox for alignment */
        align-items: center; /* Center align items vertically */
    }

    .workstream-input {
        width: 200px; /* Width of the input box */
    }

    .info-icon {
        color: white; /* Color of the text inside the circle */
        font-size: 12px; /* Font size of the info icon */
        background-color: gray; /* Background color of the circle */
        border-radius: 50%; /* Make it circular */
        width: 15px; /* Width of the circle */
        height: 15px; /* Height of the circle */
        display: flex; /* Use flexbox for centering */
        align-items: center; /* Center align text vertically */
        justify-content: center; /* Center align text horizontally */
        cursor: pointer; /* Change cursor to pointer on hover */
        margin-left: 5px; /* Space between label and icon */
        margin-top: -5px; /* Move icon slightly up */
    }

    .info-icon:hover {
        background-color: #555; /* Darker gray on hover */
    }

    </style>

    <div class="blue-banner">
        <span>BTS Orchestrator | Testing Product</span>
    </div>
            
    


""", unsafe_allow_html=True)


# Page navigation logic
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'User_Stories'

def user_story():
    # Add space between "Title", "Sub Workstream", and "Specify the Number of User Stories"
    st.markdown("""<div class="grey-banner">
            <span style="padding-left: 10px; color: #0089FD; font-weight: bold;font-size: 18px;">Admin</span> <!-- Added padding before Admin -->
            <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
            <span style="color: black; font-weight: bold;font-size: 18px;">Testing Product</span> <!-- Black color for "Testing Product" -->
            <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
            <span style="color: black; font-weight: bold;font-size: 18px;">User Story</span> <!-- Black color for "Testing Product" -->
        </div>""", unsafe_allow_html=True)

            
    st.markdown("""<div style="text-align: center;">    
            <br><span style="padding-left: 10px; font-weight: bold;font-size: 20px;">User Story Details</span>
        </div><br>""", unsafe_allow_html=True)
    
    
    container=st.container()
    with container:
        cols=st.columns(3)
        with cols[0]:
    # Input field for the user to specify the sub workstream and number of rows
            sub_workstream = st.text_input("Enter Sub Workstream", value="", key="sub_workstream_input")
        
        # Store the sub_workstream in session_state to pass it to the next pages
            st.session_state['sub_workstream'] = sub_workstream

            num_rows = st.number_input("Specify the Number of User Stories:", min_value=0, value=0)

        if num_rows > 0:
            st.session_state.df = create_dataframe_with_serial_numbers(num_rows)

    # Configure the editable grid options
    gb = GridOptionsBuilder.from_dataframe(st.session_state.df)
    gb.configure_default_column(editable=True)

    
    # Adjust column widths and alignments
    gb.configure_column("S No.", width=100, headerStyle={"fontWeight": "bold", "textAlign": "center"},
                        cellStyle={"textAlign": "center"})
    gb.configure_column("User Story", width=600, headerStyle={"fontWeight": "bold", "textAlign": "center"},
                        cellStyle={"textAlign": "center"})
    gb.configure_column("Acceptance criteria", width=250, headerStyle={"fontWeight": "bold", "textAlign": "center"},
                        cellStyle={"textAlign": "center"})
    gb.configure_column("Minimum input(s) required", width=250, headerStyle={"fontWeight": "bold", "textAlign": "center"},
                        cellStyle={"textAlign": "center"})
    gb.configure_column("KPI Name", width=200, headerStyle={"fontWeight": "bold", "textAlign": "center"},
                        cellStyle={"textAlign": "center"})


    grid_options = gb.build()

    if not st.session_state.df.empty:
        st.markdown(""" 
            <p style="        font-size: 14px;
    color: rgb(49, 51, 63);
    display: flex;
    visibility: visible;
    margin-bottom: 0.25rem;
    height: auto;
    min-height: 1.5rem;
    vertical-align: middle;
    flex-direction: row;
    -webkit-box-align: center;
    align-items: center;">Enter User Story details</p>
        """, unsafe_allow_html=True)
        response = AgGrid(
            st.session_state.df,
            gridOptions=grid_options,
            editable=True,
            fit_columns_on_grid_load=True,
            theme="streamlit",
            key='data_grid'
        )

        if response['data'] is not None:
            st.session_state.df = pd.DataFrame(response['data'])
        print(st.session_state.df)
    # Button to navigate to the next page
    if st.button("Submit"):
        st.session_state.df = st.session_state.df
        st.session_state.current_page = 'doc_upload_instruction'
        st.rerun()

def doc_upload_instruction():
    # Configure page layout
    
    # Custom CSS for styling
    st.markdown("""
        <style>

        .grey-banner {
            background-color: #F5F5F5;
            display: flex;
            justify-content: left;
            align-items: center;
            padding: 0px;
            width: 100%;
            height: 40px;
            margin-bottom: 5px;
        }

        .separator {
            color: #FF9300;
            font-weight: bold;
            margin-left: 10px;
            margin-right: 10px;
        }

        .page-text {
            color: black;
            font-weight: bold;
        }
        
        .current-text {
            color: #0089FD;
            font-weight: bold;
        }

        /* Table Styles */
        .template-explanation {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .column-explanation {
            background-color: white;
            padding: 10px;
            border-left: 3px solid #0089FD;
            margin-bottom: 10px;
        }

        .download-button {
            background-color: #071D49;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            margin: 10px 0;
        }

        /* Custom table styles */
        .custom-table {
            margin-top: 10px;
            margin-bottom: 20px;
        }

        .custom-table th {
            background-color: #f0f2f6;
            padding: 8px;
        }

        .custom-table td {
            padding: 8px;
        }

        .section-header {
            color: #071D49;
            margin-top: 30px;
            margin-bottom: 15px;
            font-size: 20px;
            font-weight: bold;
        }
        </style>

                
        <div class="grey-banner">
            <span style="padding-left: 10px; color: #0089FD; font-weight: bold;font-size: 18px;">Admin</span> <!-- Added padding before Admin -->
            <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
            <span style="color: black; font-weight: bold;font-size: 18px;">Testing Product</span> <!-- Black color for "Testing Product" -->
            <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
            <span style="color: black; font-weight: bold;font-size: 18px;">Sample Template</span> <!-- Black color for "Testing Product" -->
        </div>
    """, unsafe_allow_html=True)

    # Main content container
    main_container = st.container()
    with main_container:
        # Introduction text
        st.markdown("""
            <div style='background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 30px;'>
                <h3 class='section-header'>Template Guide</h3>
                <p>Welcome to the template section. Here you'll find sample templates and explanations for creating test cases. 
                Please review the structure and download the templates for your use.</p>
            </div>
        """, unsafe_allow_html=True)

        # Create two columns for the main layout
        upload_col, preview_col = st.columns([1, 1])
        
        with upload_col:
            # Sample Questions Section
            st.markdown("<h3 class='section-header'>Sample Questions Template</h3>", unsafe_allow_html=True)
            
            # Column explanations
            st.markdown("""
                <div class='template-explanation'>
                    <div class='column-explanation'>
                        <strong>User Story:</strong> Describe the user story or scenario for which the question is to be generated.
                        Example: "As a sales rep I want to ask AI to return AbbVie Product Prescribing Trends over time So that I can better understand that HCP's prescribing behavior"
                    </div>
                    <div class='column-explanation'>
                        <strong>Questions:</strong> Show me Nbrx trend for all the HCP in last 4 weeks.
                        Should be clear, specific, and testable.
                    </div>
                </div>
            """, unsafe_allow_html=True)
            
            # Display sample questions table
            min_param = pd.read_excel(r"C:\Users\ArribalajiM\TheMathCompany Private Limited\AbbVie - 29. GenAIsys Testing\04. Product\Question Generation & Extrapolation\Codes\Streamlit_demo\sample question to upload.xlsx").reset_index(drop=True)
            ques_template = pd.read_excel(r"C:\Users\ArribalajiM\TheMathCompany Private Limited\AbbVie - 29. GenAIsys Testing\04. Product\Question Generation & Extrapolation\Codes\Streamlit_demo\sample question to upload.xlsx").reset_index(drop=True)
            # st.table(ques_template)

            @st.cache_data
            def convert_df_to_excel(df):
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name='Sheet1')
                return output.getvalue()            

            
        with preview_col:
            # Minimum Parameters Section
            st.markdown("<h3 class='section-header'>Minimum Parameter Template</h3>", unsafe_allow_html=True)
            
            # Parameter explanations
            st.markdown("""
                <div class='template-explanation'>
                    <div class='column-explanation'>
                        <strong>User Story:</strong> The user story for whic hthe question needs to be generated.
                    </div>
                    <div class='column-explanation'>
                        <strong>KPI:</strong> KPI metrics that is to be included for generating the questions.
                    </div>
                    <div class='column-explanation'>
                        <strong>HCP:</strong> Parameter related to the HCP name.
                    </div>
                    <div class='column-explanation'>
                        <strong>Time Period:</strong> Timeframe which is to be included in the generated question.
                    </div>
                    <div class='column-explanation'>
                        <strong>Product:</strong> Product detail that is to be included in generating the question.
                    </div>
                    <div class='column-explanation'>
                        <strong>Other Parameter:</strong> Other parameters and their values for which we need to generate the questions.
                    </div>
                </div>
            """, unsafe_allow_html=True)
            

        down1,down_2=st.columns([1,1])
        with down1:
            st.download_button(
                label="📥 Download Question Template",
                data=convert_df_to_excel(ques_template),
                file_name='sample_question_template.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
        with down_2:
            st.download_button(
                label="📥 Download Parameter Template",
                data=convert_df_to_excel(min_param),
                file_name='parameter_template.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
        st.markdown("####")
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            if st.button("Skip and Continue", use_container_width=True):
                st.session_state.current_page = 'doc_upload'
                st.rerun()


def doc_upload():
    # Configure page layout
    # st.set_page_config(layout="wide")
    # show_welcome_popup()
    # Custom CSS for styling
    st.markdown("""<div class="grey-banner">
        <span style="padding-left: 10px; color: #0089FD; font-weight: bold;font-size: 18px;">Admin</span> <!-- Added padding before Admin -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Testing Product</span> <!-- Black color for "Testing Product" -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Configuration</span> <!-- Black color for "Testing Product" -->
    </div>""", unsafe_allow_html=True)
    st.markdown("""<div style="text-align: center;">    
            <br><span style="padding-left: 10px; font-weight: bold;font-size: 20px;">Configuration</span>
        </div><br>""", unsafe_allow_html=True)
    
    # Main content container
    main_container = st.container()
    with main_container:
        # Create two columns for the main layout
        col1,upload_col, col3 = st.columns([3,3,3])
        
        with col1:
            st.markdown("""<div class="grey-banner">
                            <span class="sub-heading">Sample Question File</span>""",unsafe_allow_html=True)
            # st.subheader("1. Sample Question File")
            uploaded_file_1 = st.file_uploader(
                "Sample questions for which the questions need to be generated",
                type=['csv', 'xlsx'],
                key="sample_question",
                help="Upload your sample question file here (CSV or XLSX format)"
            )
            
        with upload_col:
            # Agent selection
            st.markdown("""<div class="grey-banner">
                            <span class="sub-heading">Select Generation Agent</span>""",unsafe_allow_html=True)
            # st.subheader("3. Select Generation Agent")
            agent_option = st.selectbox(
                "Choose your question generation agent",
                options=["Select an option", "Text2API", "Text2SQL", "Text2Doc"],
                help="Select the type of question generation you want to perform"
            )
            # Second upload section


            # Conditional inputs based on agent selection
            if agent_option == "Text2API":
                col1, col2 = st.columns(2)
                with col1:
                    module_id = st.text_input("Module ID", placeholder="Enter module ID")
                    sample_values = st.text_input("Sample Column Values", placeholder="Enter sample values")
                with col2:
                    schema = st.text_input("Schema Information", placeholder="Enter schema details")
                    col_desc = st.text_input("Column Description", placeholder="Enter column description")
                    
            elif agent_option == "Text2Doc":
                uploaded_file_3 = st.file_uploader(
                    "Upload Document",
                    type=['pdf'],
                    help="Upload the document for question generation"
                )
                
            elif agent_option == "Text2SQL":
                schema = st.text_area("Schema Information", placeholder="Enter your SQL schema details here")
        with col3:
            st.markdown("""<div class="grey-banner">
                            <span class="sub-heading">Parameter Requirements</span>""",unsafe_allow_html=True)
            # st.subheader("2. Parameter Requirements")
            uploaded_file_2 = st.file_uploader(
                "Minimum required parameters like KPI, HCP name, Speaker program etc for which the Question needs to be generated",
                type=['csv', 'xlsx'],
                key="parameters",
                help="Upload the parameter requirements file here"
            )

            def read_file(file):
                if file.name.endswith('.csv'):
                    return pd.read_csv(file)
                elif file.name.endswith('.xlsx'):
                    return pd.read_excel(file)
                
            if uploaded_file_1 is not None:
                st.write("File Content:")
                df1 = read_file(uploaded_file_1)
                st.session_state.sample_qn=df1
                # st.dataframe(df1)
            if uploaded_file_2 is not None:
                st.write("File Content:")
                df2 = read_file(uploaded_file_2)
                st.session_state.minimum_param=df2
            # Action buttons
        st.markdown("### ")  # Spacing
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            if st.button("Proceed", use_container_width=True):
                st.session_state.current_page = 'Testcase_design'
                st.rerun()
                    

def test_case():
    # st.write("HCP1")  # Update with actual value as needed
    st.markdown("""<div class="grey-banner">
        <span style="padding-left: 10px; color: #0089FD; font-weight: bold;font-size: 18px;">Admin</span> <!-- Added padding before Admin -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Testing Product</span> <!-- Black color for "Testing Product" -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Test Case</span> <!-- Black color for "Testing Product" -->
    </div>""", unsafe_allow_html=True)
    st.markdown("""<div style="text-align: center;">    
            <br><span style="padding-left: 10px; font-weight: bold;font-size: 20px;">Test case</span>
        </div><br>""", unsafe_allow_html=True)

    sub_workstream = st.session_state.get('sub_workstream')
    st.markdown(f"""
            <p style="        font-size: 18px;font-weight: bold;
    color: rgb(0, 0, 0);
    display: flex;
    visibility: visible;
    margin-bottom: 0.25rem;
    height: auto;
    min-height: 1.5rem;
    vertical-align: middle;
    flex-direction: row;
    -webkit-box-align: center;
    align-items: center;">Test case design table for {sub_workstream}</p>""", unsafe_allow_html=True)
    # Use sub_workstream as a title or anywhere else
    # st.write(f"### Current Sub Workstream: {sub_workstream}")
    # Initialize the new DataFrame with additional columns
    df_testcase = st.session_state.df.copy()
    # print(df_testcase)
    # df_testcase=st.session_state.minimum_param
    happiness_columns = ['Happy', 'Happy-Multirequest', 'Happy-Nudging', 'Unhappy', 'Unhappy-Multirequest', 'Unhappy-Not Authorized', 'Unhappy-Out of Scope']
    
    # Create additional columns initialized to 0
    for col in happiness_columns:
        df_testcase[col] = 0
    
    # Define a function to calculate totals
    def calculate_total(row):
        return sum(row[happiness_columns])

    # Calculate initial totals for the new DataFrame
    # df_testcase['Total'] = df_testcase.apply(calculate_total, axis=1)

    # Configure the grid for Testcase Design
    gb_testcase = GridOptionsBuilder.from_dataframe(df_testcase)
    gb_testcase.configure_column("Serial Number", width=70, headerStyle={"fontWeight": "bold", "textAlign": "center"}, cellStyle={"textAlign": "center"})
    gb_testcase.configure_column("User Story", width=400, headerStyle={"fontWeight": "bold", "textAlign": "center"}, cellStyle={"textAlign": "left"})
    # gb_testcase.configure_column("Priority", width=100, headerStyle={"fontWeight": "bold", "textAlign": "center"}, cellStyle={"textAlign": "center"})

    # Additional happiness columns
    for col in happiness_columns:
        gb_testcase.configure_column(col, width=100, headerStyle={"fontWeight": "bold", "textAlign": "center"}, cellStyle={"textAlign": "center", "minWidth": 60}, editable=True)

    # Final Total Column
    # gb_testcase.configure_column("Total", width=100, headerStyle={"fontWeight": "bold", "textAlign": "center"}, cellStyle={"textAlign": "center", "minWidth": 60})

    grid_options_testcase = gb_testcase.build()

    
    # st.write("### Test Case Design Table")
    response_testcase = AgGrid(
        df_testcase,
        gridOptions=grid_options_testcase,
        editable=True,
        fit_columns_on_grid_load=True,
        theme="streamlit",
        key='data_grid_testcase'
    )

    # Update DataFrame with the new data and recalculate totals
    if response_testcase['data'] is not None:
        
        df_testcase_updated = pd.DataFrame(response_testcase['data'])
        # Recalculate totals after editing
        # df_testcase_updated['Total'] = df_testcase_updated.apply(calculate_total, axis=1)
        st.session_state.df_testcase = df_testcase_updated

    if st.button("Generate Questions"):
        st.session_state.current_page = 'Generated_Qns'  # Navigate to the submitted page
        st.rerun()

                
def generate_qns():
    st.markdown("""<div class="grey-banner">
        <span style="padding-left: 10px; color: #0089FD; font-weight: bold;font-size: 18px;">Admin</span> <!-- Added padding before Admin -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Testing Product</span> <!-- Black color for "Testing Product" -->
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Test case</span>
        <span style="color: #FF9300; font-weight: bold; margin-left: 10px; margin-right: 10px;"> > </span> <!-- Orange color for ">" symbol -->
        <span style="color: black; font-weight: bold;font-size: 18px;">Generated Question</span> <!-- Black color for "Testing Product" -->
    </div>""", unsafe_allow_html=True)
    st.markdown("""<div style="text-align: center;">    
            <br><span style="padding-left: 10px; font-weight: bold;font-size: 20px;">Generated Questions</span>
        </div><br>""", unsafe_allow_html=True)
 
    # st.write("### Generated Questions:")
    df=st.session_state.minimum_param
    results=[]
    json_dynamic=create_json(df)
    for user_story, data in json_dynamic.items():
        kpi_metrics=[]
        dimensions={}
        question_generation_context=user_story
        for i,j in data.items():
            if i =='KPI':
                kpi_metrics=j
            else:
                dimensions[i]=j
        num_ques_df=st.session_state.df_testcase 
        # st.write(num_ques_df)
        print(num_ques_df['User Story'])
        print(user_story)
        llm=initialize_llm()

        # happy=int(num_ques_df[num_ques_df['User Story']==user_story]['Happy'].iloc[0])
        # happy = int(num_ques_df.loc[num_ques_df['User Story'] == user_story, 'Happy'].iloc[0])
        # happy_df=pd.DataFrame()
        # if happy:
            
        #     y=generate_questions_hcp_happy(question_generation_context,kpi_metrics,dimensions,llm,happy)
        #     for q in y:
        #         results.append([user_story,'Happy',q])
        
        #     # happy_df=pd.DataFrame(results,columns=['User story','question type','questions'])

        # happy_multi=int(num_ques_df[num_ques_df['User Story']==user_story]['Happy-Multirequest'].iloc[0])
        # happy_multi_df=pd.DataFrame()
        # if happy_multi:
           
        #     y=generate_questions_hcp_multirequest(question_generation_context,kpi_metrics,dimensions,llm,happy_multi)
        #     for q in y:
        #         results.append([user_story,'Happy-Multirequest',q])
        if user_story in num_ques_df['User Story'].values:
            # Retrieve 'Happy' and 'Happy-Multirequest' values safely
            happy = int(num_ques_df.loc[num_ques_df['User Story'] == user_story, 'Happy'].iloc[0])
            happy_multi = int(num_ques_df.loc[num_ques_df['User Story'] == user_story, 'Happy-Multirequest'].iloc[0])

            # Process 'Happy' questions
            if happy:
                happy_questions = generate_questions_hcp_happy(question_generation_context, kpi_metrics, dimensions, llm, happy)
                for q in happy_questions:
                    results.append([user_story, 'Happy', q])

            # Process 'Happy-Multirequest' questions
            if happy_multi:
                happy_multi_questions = generate_questions_hcp_multirequest(question_generation_context, kpi_metrics, dimensions, llm, happy_multi)
                for q in happy_multi_questions:
                    results.append([user_story, 'Happy-Multirequest', q])


    # Convert results to a DataFrame and remove duplicates
    if results:
        results_df = pd.DataFrame(results, columns=['User story', 'question type', 'questions'])
        results_df.drop_duplicates(inplace=True)

        # Display the results
        st.table(results_df)
    else:
        st.warning("No results generated.")

        
            
                
    results_df=pd.DataFrame(results,columns=['User story','question type','questions'])
    results_df.drop_duplicates(inplace=True)
    # st.write(results_df)
    
    # st.dataframe(results_df, use_container_width=True) 
    # st.table(results_df)
    
    def convert_df_to_excel(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Sheet1')
        #     writer.save()  # Ensure all data is written before getting the buffer
        # output.seek(0)  # Reset the buffer position to the beginning
        return output

    result_excel_data = convert_df_to_excel(results_df)
    st.download_button(label="Download",
            data=result_excel_data,
            file_name='generated questions.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        
    # st.download_button()

# User Stories Page
if st.session_state.current_page == 'User_Stories':
    # Function to create an empty DataFrame with a specified number of rows
    def create_dataframe_with_serial_numbers(num_rows):
        serial_numbers = [i + 1 for i in range(num_rows)]
        return pd.DataFrame({'S No.': serial_numbers, 'User Story': [''] * num_rows,
                            'Acceptance criteria':[''] * num_rows,'Minimum input(s) required':[''] * num_rows,
                            'KPI Name':['']* num_rows})

    # Initialize the session state for the DataFrame if it doesn't exist
    if 'df' not in st.session_state:
        st.session_state.df = pd.DataFrame(columns=['Serial Number', 'User Story'])
    
    user_story()

if st.session_state.current_page == 'doc_upload_instruction':
    doc_upload_instruction()

if st.session_state.current_page == 'doc_upload':
    doc_upload()

# Testcase Design Page
if st.session_state.current_page == 'Testcase_design':
    test_case()

if st.session_state.current_page == 'Generated_Qns':
    generate_qns()